package br.ufes.informatica.doeLivros.book.persistence;

import java.util.Date;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.ufes.inf.nemo.jbutler.ejb.persistence.BaseJPADAO;
import br.ufes.informatica.doeLivros.book.domain.Book;
import br.ufes.informatica.doeLivros.people.domain.Person;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
public class BookDAOJPA extends BaseJPADAO<Book> implements BookDAO {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	/** TODO: generated by FrameWeb. Should be documented. */
	@PersistenceContext
	private EntityManager entityManager;

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	protected EntityManager getEntityManager() {
		return entityManager;
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public List<Book> getBookByTitle(String title) {
		// FIXME: auto-generated method stub
		return null;
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public List<Book> getBookByAuthor(String author) {
		// FIXME: auto-generated method stub
		return null;
	}

	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	public List<Book> getBookList() {
		// FIXME: auto-generated method stub
		return null;
	}

	// Método para buscar os livros de acordo com os parâmetros dados, que são opcionais
	@Override
	public List<Book> getBookListWithParams(String author, String donorName, String genre, String title,
			Date availabilityDate, String editor, Integer publicationYear) {

		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Book> cq = cb.createQuery(Book.class);
		Root<Book> root = cq.from(Book.class);

		int count = 0;
		count = (author!=null) ? count+1 : count;
		count = (donorName!=null) ? count+1 : count;
		count = (genre!=null) ? count+1 : count;
		count = (title!=null) ? count+1 : count;
		count = (availabilityDate!=null) ? count+1 : count;
		count = (editor!=null) ? count+1 : count;
		count = (publicationYear!=null) ? count+1 : count;

		Predicate[] predicates = new Predicate[count];

		if (author != null) 
			predicates[--count] = cb.equal(root.get("author"), author); 
		if (donorName!=null) {
			Join<Book, Person> joinBookPerson = root.join("donatedBy");
			predicates[--count] = cb.like(cb.concat(joinBookPerson.get("firstName"), joinBookPerson.get("lastName")),String.format("%c%s%c",'%',donorName,'%'));
		} 
		if (genre!=null)
			predicates[--count] = cb.equal(root.get("genre"), genre); 
		if (title!=null)
			predicates[--count] = cb.equal(root.get("title"), title); 
		if (availabilityDate!=null)
			predicates[--count] = cb.equal(root.get("availabilityDate"), availabilityDate); 
		if (editor!=null)
			predicates[--count] = cb.equal(root.get("editor"), editor); 
		if (publicationYear!=null)
			predicates[--count] = cb.equal(root.get("publicationYear"), publicationYear); 

		cq.select(root).where(predicates);
		Query query = entityManager.createQuery(cq); 

		@SuppressWarnings("unchecked")
		List<Book> results = query.getResultList(); // Isso dá warning
		return results;
	}

	// Método para pegar os livros de acordo com um usuário específico 
	// Ou todos os livros do sistmea (se o argumento for nulo)
	@Override
	public List<Book> getBookListByDonor(Person donatedBy) {

		CriteriaBuilder cb = entityManager.getCriteriaBuilder();
		CriteriaQuery<Book> cq = cb.createQuery(Book.class);
		Root<Book> root = cq.from(Book.class);

		cq.select(root);
		if (donatedBy != null) {
			Predicate[] predicates = new Predicate[1];

			Join<Book, Person> joinBookPerson = root.join("donatedBy");
			predicates[0] = cb.equal(joinBookPerson.get("id"), donatedBy.getId()); 

			//cq.where(cb.equal(root.get("donatedBy"), donatedBy));//   root.get("donatedBy").in(donatedBy));

			cq.select(root).where(predicates);
		}
		else {
			cq.select(root);
		}
		cq.orderBy(cb.asc(root.get("title")));

		Query query = entityManager.createQuery(cq); 

		@SuppressWarnings("unchecked")
		List<Book> bookList = query.getResultList();

		return bookList;
	}

}